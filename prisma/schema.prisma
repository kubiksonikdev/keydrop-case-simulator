datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String  @id @unique
  username     String  @unique
  passwordHash String
  inventory    Item[]
  balance      Float   @default(50)
  goldBalance  Int     @default(0)
  sandboxMode  Boolean @default(false)
}

model Item {
  owner         User                @relation(fields: [ownerId], references: [id])
  globalInvItem GlobalInventoryItem @relation(fields: [weaponName, skinName, skinQuality, skinPrice, skinRarity, skinImgSource, stattrack], references: [weaponName, skinName, skinQuality, skinPrice, skinRarity, skinImgSource, stattrack], onUpdate: Cascade)
  dropId        String              @id @unique
  ownerId       String
  origin        String
  weaponName    String
  skinName      String
  skinQuality   String
  skinPrice     Float
  skinRarity    String
  skinImgSource String
  stattrack     Boolean             @default(false)
  dropDate      DateTime            @default(now())
  sold          Boolean             @default(false)
  upgraded      Boolean             @default(false)
}

model Session {
  id     String @id @unique
  userId String
}

model Case {
  section        CaseSection? @relation(fields: [category], references: [name])
  urlName        String       @id @unique
  websiteName    String       @unique
  price          Float
  expired        Boolean      @default(false)
  category       String?
  imgName        String
  positionInGrid Int?
  drops          CaseDrop[]
}

model CaseSection {
  id       String @id @unique
  name     String @unique
  rowSpan  Int
  colSpan  Int
  ratio    String
  position Int
  cases    Case[]
}

model CaseDrop {
  case          Case                @relation(fields: [parentCase], references: [websiteName])
  globalInvItem GlobalInventoryItem @relation(fields: [weaponName, skinName, skinQuality, skinPrice, skinRarity, skinImgSource, stattrack], references: [weaponName, skinName, skinQuality, skinPrice, skinRarity, skinImgSource, stattrack], onUpdate: Cascade)
  weaponName    String
  skinName      String
  skinQuality   String
  skinPrice     Float
  skinRarity    String
  skinImgSource String
  stattrack     Boolean             @default(false)
  parentCase    String
  displayOdds   String
  oddsRange     Int[]
  priceRange    String
  displayChance String

  @@unique([parentCase, weaponName, skinName, skinQuality])
}

model GlobalInventoryItem {
  weaponName    String
  skinName      String
  skinQuality   String
  skinPrice     Float
  skinRarity    String
  skinImgSource String
  stattrack     Boolean    @default(false)
  Item          Item[]
  CaseDop       CaseDrop[]

  @@unique([weaponName, skinName, skinQuality, stattrack])
  @@unique([weaponName, skinName, skinQuality, skinPrice, skinRarity, skinImgSource, stattrack])
}
